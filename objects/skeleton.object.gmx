<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>skeleton_bw</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIATE

agility = 0;
hp = 100;
attack = 0;
damage[4] = 0;
debuff[3] = 0;
range = card_wizard.x_grid / 4;
aim = ds_list_create();
all_damage = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACK HIT

var hits = ds_queue_create();
var hit_a = collision_circle(xt,yt,range,hunter,false,true);
while hit_a != noone
{   ds_list_add(hit_a.all_damage,attack);
    ds_queue_enqueue(hits,hit_a);
    instance_deactivate_object(hit_a);
    hit_a = collision_circle(xt,yt,range,hunter,false,true);
}
while !ds_queue_empty(hits)
    instance_activate_object(ds_queue_dequeue(hits));
ds_queue_destroy(hits);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACK SETUP AND DEATH

for (var i=0;i&lt;ds_list_size(all_damage);i++)
    for (var j=0;j&lt;=4;j++)
    {   var k = all_damage[|i];
        damage[j] += k[j];
    }
ds_list_clear(all_damage);

var some_time = room_speed * (8+random_range(-3,7));
if agility &gt;= some_time
{   agility -= some_time;
    if !debuff[3]
    {   var get_random = ds_list_create();
        for (i=0;i&lt;=2;i++)
            for (j=0;j&lt;=2;j++)
                if card_wizard.mercs[#i,j] != noone
                    ds_list_add(get_random,card_wizard.mercs[#i,j]);
        with get_random[|irandom(ds_list_size(get_random)-1)]
        {   other.xt = x;
            other.yt = y;
        }
        attack = card_wizard.progress * max(1-0.1*ceil(debuff[2]/room_speed/30),0.1);
        alarm[0] = max(room_speed * (2.7-0.1*card_wizard.progress),room_speed/6);
        ds_list_destroy(get_random);
    }
}
else
    agility += max(1-0.2*ceil(debuff[1]/room_speed/20),0.1);

hp -= !!debuff[0]*(1+card_wizard.progress)/room_speed;
for (i=0;i&lt;=3;i++)
    debuff[i] = max(debuff[i]-1,0);
if damage[0] and !debuff[3]
{   hp -= damage[0];
    if damage[1]
        debuff[0] = room_speed*5;//burn
    if damage[4]
        debuff[3] = room_speed*10;//warp
    debuff[1] += !!damage[2] * room_speed*20;//slow
    debuff[2] += !!damage[3] * room_speed*30;//dull
    
}
for (i=0;i&lt;=4;i++)
    damage[i] = 0;

if hp &lt;= 0
{   /*for (var i=0;i&lt;=2;i++)
        for (var j=0;j&lt;=2;j++)
            if (card_wizard.mercs[#i,j]!=noone) and (card_wizard.mercs[#i,j]!=id)
            {   card_wizard.mercs[#i,j].buff_a -= buff_sp[0];
                card_wizard.mercs[#i,j].buff_s -= buff_sp[1];
                card_wizard.mercs[#i,j].buff_d -= buff_sp[2];
            }*/
    card_wizard.mercs[#ds_grid_value_x(card_wizard.mercs,3,0,4,2,id),
                       ds_grid_value_y(card_wizard.mercs,3,0,4,2,id)] = noone;
    card_wizard.blood += 250;
    with hunter if ds_list_find_index(other.aim,unit) &gt;= 0
        target = noone;
    ds_list_destroy(aim);
    ds_list_destroy(all_damage);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SELF AND ATTACK

draw_self();
image_xscale = room_width/view_wport[0];
image_yscale = room_height/view_hport[0];
draw_text_transformed_color(x+sprite_width,y,
                            hp,
                            room_width/view_wport[0],room_height/view_hport[0],
                            0,c_red,c_red,c_red,c_red,1);
for (var i=0;i&lt;ds_list_size(aim);i++)
    //draw_text(x+sprite_width,y+20*(1+i),aim[|i]);
    draw_text_transformed_color(x + sprite_width,y + room_height*(1+i)/36,
                                aim[|i],
                                room_width/view_wport[0],room_height/view_hport[0],
                                0,c_black,c_black,c_black,c_black,1);
if alarm[0]
    draw_circle_color(xt,yt,range,
                      c_red,merge_color(c_white,c_red,1-alarm[0]/room_speed/2),
                      false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
