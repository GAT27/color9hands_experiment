<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>berserker_bw</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIATE

ammo = 200;
skill_cap = 2;
skill = skill_cap;
armor = 0;
hp = 25;
courage = 1;

/*0: attack damage
1: attack burn
2: attack slow
3: attack dull
4: attack warp
*/attack[4] = 0;
agility = 0;
block = 0;
damage = 0;
all_damage = ds_list_create();
hp_gain = 0;
blood_gain = 0;
invulnr = 0;
ready = 1;
buff_a = 0;
buff_s = 0;
buff_d = 0;
target = noone;
actp = "";

/*0: berserker attack
1: berserker speed
2: berserker defense
3: fire1 attack
4: earth2 defense
*/buff_sp[4] = 0;
burst = 0;
rage = 0;
caster = 85;
/*0: warp defense
1: wind defense
2: earth defense
3: soul defense
*/shield[3] = ds_list_create();
/*0: attack burn
1: absorb life
2: absorb blood
*/modifier[2] = 0;

t1 =0
t2 =0
//alarm[2] = 60

/*
ber_a:1.5
ber_s:1.0
twn_a:1.2
twn_s:2.2
ham_a:1.9
ham_s:0.3
arw_a:1.0
arw_s:1.4
gun_a:1.4
gun_s:1.1
can_a:3.0
can_s:0.5
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t1++;
if t1 &gt; 10
{   t1 = 0;
    t2++;
    if t2 &gt; 10
        t2 = 0;
}
if class = "berserker"
    alarm[2] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STAT CALCULATIONS

//Damage from all sources
for (var i=0;i&lt;ds_list_size(all_damage);i++)
    for (var j=0;j&lt;=0;j++)
    {   var k = all_damage[|i];
        if !is_array(k)
            damage += k;
        else
        {   damage += k[0];
            if k[4]
                shield[0] = -k[4];
        }
    }
ds_list_clear(all_damage);

//Buffs from abilities
buff_a -= buff_sp[3];
buff_sp[3] = 1.0*!!modifier[0];
buff_a += buff_sp[3];
armor -= buff_sp[4];
buff_sp[4] = 2*ceil(shield[2]/room_speed/20);
armor += buff_sp[4];

//Standard base output
switch class
{   case "berserker":   sprite_index = berserker_bw;
                        rage = 1 - (hp/courage/25);
                        attack[0] = (0.5+courage*0.5) * (buff_a+1.4);
                        agility += (0.8+courage*0.2) * (buff_s+rage+1.0);
                        block = ceil(armor * (buff_d+1.5));
                        break;
    case "twin":        sprite_index = twin_bw;
                        attack[0] = (0.5+courage*0.5) * (buff_a+1.1);
                        agility += (0.8+courage*0.2) * (buff_s+1.9);
                        block = ceil(armor * (buff_d+1.25));
                        break;
    case "hammer":      sprite_index = hammer_bw;
                        attack[0] = (0.5+courage*0.5) * (buff_a+2.8);
                        agility += (0.8+courage*0.2) * (buff_s+0.7);
                        block = ceil(armor * (buff_d+1.75));
                        break;
    case "arrow":       sprite_index = arrow_bw;
                        attack[0] = (0.5+courage*0.5) * (buff_a+1.0);
                        agility += (0.8+courage*0.2) * (buff_s+1.7);
                        block = ceil(armor * (buff_d+1.0));
                        break;
    case "gun":         sprite_index = gun_bw;
                        attack[0] = (0.5+courage*0.5) * (buff_a+1.3);
                        agility += (0.8+courage*0.2) * (buff_s+1.2);
                        block = ceil(armor * (buff_d+1.0));
                        break;
    case "cannon":      sprite_index = cannon_bw;
                        attack[0] = (0.5+courage*0.5) * (buff_a+4.0);
                        agility += (0.8+courage*0.2) * (buff_s+0.5);
                        block = ceil(armor * (buff_d+1.0));
                        break;
    case "mage":        sprite_index = mage_bw;
                        attack[0] = (0.5+courage*0.5) * (buff_a+1.0);
                        agility += (0.8+courage*0.2) * (buff_s+1.0);
                        block = ceil(armor * (buff_d+0.5));
                        break;
}
if shield[0]
    attack[0] = 0;
attack[1] = modifier[0];
for (i=2;i&lt;=4;i++)
    attack[i] = 0;

//Actions after standard output
switch actp
{   case "berserker":   if skill and !burst//Enrage
                        {   skill--;
                            burst = room_speed*10;
                            buff_a += 0.1;
                            buff_s += 0.1;
                            buff_d += 0.1;
                            buff_sp[0] = rage + buff_a;
                            buff_sp[1] = rage + buff_s;
                            buff_sp[2] = rage + buff_d;
                            with hunter if id != other
                            {   buff_a += other.buff_sp[0];
                                buff_s += other.buff_sp[1];
                                buff_d += other.buff_sp[2];
                            }
                            agility += (0.8+courage*0.2) * (buff_s+rage+1.0);
                        }
                        break;
    case "twin":        if skill//Slash
                        {   skill--;
                            rage = 9;
                            buff_a += 5;
                            ready = 0;
                            invulnr++;
                            attack[0] = (0.5+courage*0.5) * (buff_a+1.1);
                        }
                        break;
    case "hammer":      if skill and (target!=noone)//Smash
                        {   skill--;
                            attack[0] *= 20;
                            hp_gain += !!modifier[1] * attack[0]*5;
                            blood_gain += !!modifier[2] * attack[0]*50;
                            ds_list_add(target.all_damage,attack);
                        }
                        break;
    case "s_earth1":    skill--;//Meteor
                        ammo--;
                        attack[0] = attack[0]*60 + irandom_range(-10,10)*!!attack[0];
                        hp_gain += !!modifier[1] * attack[0]*5;
                        blood_gain += !!modifier[2] * attack[0]*50;
                        ds_list_add(target.all_damage,attack);
                        target = noone;
                        break;
    case "s_earth2":    skill--;//Bodyarmor
                        ammo--;
                        target.shield[2] = room_speed*60;
                        target = noone;
                        break;
    case "s_earth3":    skill--;//Money
                        ammo--;
                        target.modifier[2] = room_speed*15;
                        target = noone;
                        break;
    case "s_air1":      skill--;//Barrier
                        ammo--;
                        target.shield[1] = room_speed*30;
                        target = noone;
                        break;
    case "s_air3":      skill--;//Purge
                        ammo--;
                        attack[0] *= 5;
                        attack[4] = 1;
                        hp_gain += !!modifier[1] * attack[0]*5;
                        blood_gain += !!modifier[2] * attack[0]*50;
                        ds_list_add(target.all_damage,attack);
                        target = noone;
                        break;
    case "s_water1":    skill--;//Freeze
                        ammo--;
                        attack[0] *= 20;
                        attack[2] = 1;
                        hp_gain += !!modifier[1] * attack[0]*5;
                        blood_gain += !!modifier[2] * attack[0]*50;
                        ds_list_add(target.all_damage,attack);
                        target = noone;
                        break;
    case "s_water2":    skill--;//Lifesteal
                        ammo--;
                        target.modifier[1] = room_speed*15;
                        target = noone;
                        break;
    case "s_water3":    skill--;//Soullink
                        ammo--;
                        i = (target&gt;&gt;20)&amp;1048575;
                        target = target&amp;1048575;
                        j[1] = room_speed*50;
                        j[0] = i;
                        ds_list_add(target.shield[3],j);
                        target = noone;
                        break;
    case "s_fire1":     skill--;//Flame
                        ammo--;
                        target.modifier[0] = room_speed*5;
                        target = noone;
                        break;
    case "s_fire2":     skill--;//Lightning
                        ammo--;
                        attack[0] *= 10;
                        attack[3] = 1;
                        var get_random = ds_list_create();
                        for (i=3;i&lt;=4;i++)
                            for (j=0;j&lt;=2;j++)
                                if card_wizard.mercs[#i,j] != noone
                                    ds_list_add(get_random,card_wizard.mercs[#i,j]);
                        for (i=0;i&lt;ds_list_size(get_random);i++)
                        {   k = 0;
                            for (j=4;j&gt;=0;j--)
                                k[j] = attack[j];
                            k[0] *= (2+ceil(get_random[|i].debuff[2]/room_speed/30))/2;
                            hp_gain += !!modifier[1] * k[0]*5;
                            blood_gain += !!modifier[2] * k[0]*50;
                            ds_list_add(get_random[|i].all_damage,k);
                        }
                        break;
    case "s_fire3":     skill--;//Nuke
                        ammo--;
                        attack[0] *= 200;
                        var get_random = ds_list_create();
                        for (i=0;i&lt;=4;i++)
                            for (j=0;j&lt;=2;j++)
                                if card_wizard.mercs[#i,j] != noone
                                    ds_list_add(get_random,card_wizard.mercs[#i,j]);
                        for (i=0;i&lt;ds_list_size(get_random);i++)
                        {   k = 0;
                            for (j=4;j&gt;=0;j--)
                                k[j] = attack[j];
                            if get_random[|i].object_index == hunter
                                k[0] /= 10;
                            hp_gain += !!modifier[1] * k[0]*5;
                            blood_gain += !!modifier[2] * k[0]*50;
                            ds_list_add(get_random[|i].all_damage,k);
                        }
                        break;
}
actp = "";

//Damage after defensive calc
if shield[0] or invulnr
    damage = 0;
else if damage+0.5
{   if shield[1]
    {   damage = 0;
        shield[1] = 0;
    }
    else
    {   damage = ceil(max(damage-block,1));
        if shield[2]
            shield[2] -= shield[2]%(room_speed*20)
                       + room_speed*20*!(shield[2]%(room_speed*20));
        if ds_list_size(shield[3])
        {   for (i=0;i&lt;ds_list_size(shield[3]);i++)
            {   j = ds_list_find_value(shield[3],i);
                j[0].hp -= damage div (ds_list_size(shield[3])+1);
            }
            damage = damage div (ds_list_size(shield[3])+1)
                   + damage%(ds_list_size(shield[3])+1);
        }
    }
    if shield[0] == -1
        shield[0] = 1 + room_speed*10;
}

//Shields and modifiers reduction
for (i=0;i&lt;=3;i++)
{   if i != 3
        shield[i] = max(shield[i]-1,0);
    else for (j=ds_list_size(shield[3]);j&gt;0;j--)
    {   k = ds_list_find_value(shield[3],j-1);
        k[1]--;
        if !k[1]
            ds_list_delete(shield[3],j-1);
    }
}
for (i=0;i&lt;=2;i++)
    modifier[i] = max(modifier[i]-1,0);

if (class=="berserker") and burst
{   burst--;
    if !burst
    {   buff_a -= 0.1;
        buff_s -= 0.1;
        buff_d -= 0.1;
        for (i=0;i&lt;=2;i++)
            for (j=0;j&lt;=2;j++)
                if (card_wizard.mercs[#i,j]!=noone) and (card_wizard.mercs[#i,j]!=id)
                {   card_wizard.mercs[#i,j].buff_a -= buff_sp[0];
                    card_wizard.mercs[#i,j].buff_s -= buff_sp[1];
                    card_wizard.mercs[#i,j].buff_d -= buff_sp[2];
                }
        buff_sp[0] = 0;
        buff_sp[1] = 0;
        buff_sp[2] = 0;
    }
}
else if (class=="arrow") and damage and skill and (random(1)&gt;=power(0.85,skill))
{   damage = 0;
    skill--;
}

if ready
{   if target == noone
        agility = 0;
    else if agility &gt;= room_speed
    {   agility -= room_speed;
        if !ammo
            attack[0] /= 10;
        else
            ammo--;
        var get_random = ds_list_create();
        
        if class == "twin"
        {   attack[0] /= 2;
            for (i=3;i&lt;=4;i++)
                for (j=0;j&lt;=2;j++)
                    if card_wizard.mercs[#i,j] != noone
                        ds_list_add(get_random,card_wizard.mercs[#i,j]);
            ds_list_add(get_random[|irandom(ds_list_size(get_random)-1)].all_damage,attack);
            ds_list_add(target.all_damage,attack);
            k = attack[0]*2;
        }
        else if class == "gun"
        {   for (i=3;i&lt;=4;i++)
                for (j=0;j&lt;=2;j++)
                    if card_wizard.mercs[#i,j] != noone
                        ds_list_add(get_random,card_wizard.mercs[#i,j]);
            attack[0] *= (0.8+0.2*ds_list_size(get_random)) / ds_list_size(get_random);
            for (i=0;i&lt;ds_list_size(get_random);i++)
                ds_list_add(get_random[|i].all_damage,attack);
            k = attack[0]*ds_list_size(get_random);
            if skill and (random(1)&gt;=power(0.92,skill))
            {   skill--;
                card_wizard.scrap += 40 * ceil(k);
            }
        }
        else if (class="cannon") and skill and (random(1)&gt;=power(0.98,skill))
        {   skill--;
            attack[0] *= 30;
            ds_list_add(target.all_damage,attack);
            k = attack[0];
        }
        else
        {   ds_list_add(target.all_damage,attack);
            k = attack[0];
        }
        
        hp_gain += !!modifier[1] * k*5;
        blood_gain += !!modifier[2] * k*50;
        ds_list_destroy(get_random);
    }
}
else
{   if rage and (class=="twin")
    {   burst--;
        if !burst 
        {   var get_random = ds_list_create();
            for (i=3;i&lt;=4;i++)
                for (j=0;j&lt;=2;j++)
                    if card_wizard.mercs[#i,j] != noone
                        ds_list_add(get_random,card_wizard.mercs[#i,j]);
            ds_list_add(get_random[|irandom(ds_list_size(get_random)-1)].all_damage,attack);
            hp_gain += !!attack[2] * attack[0]*5;
            blood_gain += !!attack[3] * attack[0]*50;
            ds_list_destroy(get_random);
            rage--;
            if rage
                burst = room_speed/2;
            else
            {   buff_a -= 5;
                ready = 1;
                invulnr--;
            }
        }
    }
    else
    {   agility = 0;
        move_towards_point(xn,yn,room_width/80);
        if distance_to_point(xn,yn) &lt; room_width/80
        {   x = xn;
            y = yn;
            speed = 0;
            ready = 1;
        }
    }
}

//Gains and life output
//MAY WANT TO CHANGE VARIABLE NAME FROM BLOOD TO MONEY
if hp_gain &gt;= 100
{   hp += hp_gain div 100;
    hp_gain %= 100;
}
if blood_gain &gt;= 100
{   card_wizard.blood += blood_gain div 100;
    blood_gain %= 100;
}
skill = clamp(skill,0,skill_cap);
hp = min(hp-damage,courage*25);
damage = 0;

//Death
if hp &lt;= 0
{   with card_wizard
    {   for (i=0;i&lt;=2;i++)
            for (j=0;j&lt;=2;j++)
                if (mercs[#i,j]!=noone) and (mercs[#i,j]!=other.id)
                {   mercs[#i,j].buff_a -= other.buff_sp[0];
                    mercs[#i,j].buff_s -= other.buff_sp[1];
                    mercs[#i,j].buff_d -= other.buff_sp[2];
                }
        mercs[#ds_grid_value_x(mercs,0,0,2,2,other.id),
               ds_grid_value_y(mercs,0,0,2,2,other.id)] = noone;
        if hold_press == other.id
        {   hold_press = noone;
            hold_timer = 0;
        }
        if hold_actor == other.id
            hold_actor = noone;
    }
    
    /*ADD 2 THINGS
    IF HOLD_PRESS DURING WATER_3 IS DESTROYED
    IF TARGET LINK IS DESTROYED, REMOVE IT AS A TARGET FOR THOSE THAT ARE LINKING TO IT
    */
    ds_list_destroy(shield[3]);
    ds_list_destroy(all_damage);
    if target != noone
        ds_list_delete(target.aim,ds_list_find_index(target.aim,unit));
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SELF

draw_self();//NEEDS FIXING AND CLEANING
image_xscale = room_width/view_wport[0];
image_yscale = room_height/view_hport[0];
if ready
{   var w_box = room_width/10;
    var h_box = room_height/8;
    /*var b_surf = surface_create(room_width/5,room_height/4);
    var f_surf = surface_create(room_width/5,room_height/4);
    //x = w_box;
    //y = h_box;
    surface_set_target(b_surf);
    draw_clear_alpha(0,0);
    //surface_set_target(f_surf);
    //draw_clear_alpha(0,0);
    draw_rectangle(0,0,room_width/5,room_height/4,false);
    draw_set_blend_mode(bm_subtract);
    draw_circle(room_width/10,room_height/8,room_width/10,false);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();*/
    //draw_rectangle(x-w_box,y-h_box,x+w_box,y+h_box,false);
    //draw_set_blend_mode(bm_subtract);
    //draw_set_color(c_white);
    //draw_circle_colour(x,y,w_box,c_white,c_white,false);
    //draw_set_color(0);
    //draw_set_blend_mode_ext(bm_dest_alpha,bm_zero);
    //draw_set_blend_mode_ext(t1,t2);
    
    draw_rectangle_color(x-w_box,y-h_box,
                         x-w_box+2*h_box/3,y+h_box/3,
                         c_black,c_black,c_black,c_black,false);
    
    draw_circle_color(x-w_box+h_box/3,
                      y-2*h_box/3,
                      h_box/3,c_white,c_black,false);
    draw_arrow(x-w_box+h_box/3,
               y-2*h_box/3,
               -h_box*dcos(90+360*agility/room_speed)/3 + x-w_box+h_box/3,
               -h_box*dsin(90+360*agility/room_speed)/3 + y-2*h_box/3,
               5);
    draw_set_halign(fa_center);
    draw_text_transformed_color(x-w_box+h_box/3,y-2*h_box/3,
                                ammo,
                                room_width/view_wport[0],room_height/view_hport[0],
                                0,c_black,c_black,c_black,c_black,1);
    //draw_text(x-w_box+h_box/3,
      //        y-2*h_box/3,ammo);
    draw_set_halign(fa_left);
    
    draw_set_valign(fa_middle);
    draw_text_transformed_color(x-w_box,y-h_box/6,
                                string(skill)+"/"+string(skill_cap),
                                room_width/view_wport[0],room_height/view_hport[0],
                                0,c_yellow,c_yellow,c_yellow,c_yellow,1);
    draw_text_transformed_color(x-w_box,y+h_box/6,
                                string(block)+"/"+string(armor),
                                room_width/view_wport[0],room_height/view_hport[0],
                                0,c_blue,c_blue,c_blue,c_blue,1);
    //draw_text(x-w_box,y-h_box/6,string(skill)+" / "+string(skill_cap));
    //draw_text(x-w_box,y+h_box/6,string(block)+" / "+string(armor));
    
    draw_rectangle_color(x-w_box,y+h_box/3,
                         x + w_box*(-1+hp/courage/12.5),y+h_box,
                         c_black,c_black,c_black,c_black,false);
    draw_set_valign(fa_bottom);
    draw_text_transformed_color(x-w_box,y+h_box,//-20,
                                courage,
                                room_width/view_wport[0],room_height/view_hport[0],
                                0,c_red,c_red,c_red,c_red,1);
    //draw_text(x-w_box,y+h_box-20,unit);
    /*draw_set_halign(fa_center);
    draw_text_transformed_color(x,y+h_box,//-20,
                                hp,
                                room_width/view_wport[0],room_height/view_hport[0],
                                0,c_black,c_black,c_black,c_black,1);*/
    //draw_text(x,y+h_box-20,hp);
    draw_set_halign(fa_right);
    draw_text_transformed_color(x+w_box/*-20*/,y+h_box,//-20,
                                unit,
                                room_width/view_wport[0],room_height/view_hport[0],
                                0,c_dkgray,c_dkgray,c_dkgray,c_dkgray,1);
    //draw_text(x+w_box-20,y+h_box-20,courage);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    //draw_set_blend_mode_ext(t1,t2);
    //draw_circle(x,y,w_box,false);
    //draw_set_blend_mode(bm_subtract);
    //draw_set_blend_mode_ext(t1,t2);
    //draw_surface(b_surf,x-w_box,y-h_box);
    //draw_set_blend_mode(bm_normal);
    //surface_reset_target();
    //x = xprevious;
    //y = yprevious
    //draw_surface(b_surf,x-w_box,y-h_box);
    //surface_free(b_surf);
    //surface_free(f_surf);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
