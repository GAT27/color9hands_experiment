<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIATE

device_mouse_dbclick_enable(false);
draw_enable_alphablend(false);
draw_set_font(ocr);
//draw_clear_alpha(0,0);
show_debug_overlay(true);
randomize();

if os_type == os_android
{   room_width = display_get_width();
    room_height = display_get_height();
    os_powersave_enable(false);
}
else
{   room_width = 1280;
    room_height = 720;
}
view_wview[0] = room_width;
view_hview[0] = room_height;

mercs = ds_grid_create(5,3);
ds_grid_clear(mercs,noone);
x_grid = room_width/5;
y_grid = room_height/4;
the_hand = ds_list_create();
the_deck = instance_create(room_width*0.9,y_grid*3.5,deck);
the_deck.image_xscale *= room_width/view_wport[0];
the_deck.image_yscale *= room_height/view_hport[0]/2;
pts[20,1] = 0;
auto_draw = 0;
binder[1] = 0;
blood = 900//800;
scrap = 200;
unit_n = 4;
progress = 1;
hold_press = noone;
hold_timer = 0;
hold_actor = noone;
hold_float = noone;

mage_me = instance_create(x_grid*0.5,y_grid*1.5,hunter);
mercs[#0,1] = mage_me;
mage_me.class = "mage";
mage_me.ammo /= 40;
mage_me.skill_cap += 8;
mage_me.skill += 8;
mage_me.armor++;
mage_me.courage += 3;
mage_me.hp += 75;
mage_me.unit = 1;
mercs[#1,0] = instance_create(x_grid*1.5,y_grid*0.5,hunter);
mercs[#1,0].class = choose("berserker","twin","berserker","hammer");
mercs[#1,0].unit = 2;
mercs[#1,2] = instance_create(x_grid*1.5,y_grid*2.5,hunter);
mercs[#1,2].class = choose("arrow","gun","arrow","cannon");
mercs[#1,2].unit = 3;
mercs[#3,0] = instance_create(x_grid*3.5,y_grid*0.5,skeleton);
mercs[#4,1] = instance_create(x_grid*4.5,y_grid*1.5,skeleton);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BATTLE

blood = clamp(blood,0,1000);

if ds_grid_value_exists(mercs,0,0,2,2,mage_me)
{   //First press
    if device_mouse_check_button_pressed(0,mb_left) or auto_draw
    {   var hit_x = floor(device_mouse_x(0)/x_grid);
        var hit_y = floor(device_mouse_y(0)/y_grid);
        if (hit_y&lt;=2) and !auto_draw//Playfield
        {   var hit_o = mercs[#hit_x,hit_y];
            var hit_a = "";
            if hold_actor != noone
                hit_a = hold_actor.class;
            switch hit_a
            {   case "berserker":   //
                case "twin":        //
                case "hammer":      if hit_o == noone
                                    {   if hit_x &lt;= 2
                                        {   mercs[#ds_grid_value_x(mercs,0,0,2,2,hold_actor),
                                                   ds_grid_value_y(mercs,0,0,2,2,hold_actor)] = noone;
                                            mercs[#hit_x,hit_y] = hold_actor;
                                            hold_actor.ready = 0;
                                            hold_actor.xn = x_grid*(hit_x+0.5);
                                            hold_actor.yn = y_grid*(hit_y+0.5);
                                        }
                                    }
                                    else
                                    {   if mercs[#hit_x,hit_y] == hold_actor
                                        {   with hold_actor.target
                                                ds_list_delete(aim,
                                                ds_list_find_index(aim,other.hold_actor.unit));
                                            hold_actor.target = noone;
                                        }
                                        else if hit_x &gt; 2
                                        {   with hold_actor.target
                                                ds_list_delete(aim,
                                                ds_list_find_index(aim,other.hold_actor.unit));
                                            with hit_o
                                                ds_list_add(aim,other.hold_actor.unit);
                                            hold_actor.target = hit_o;
                                        }
                                    }
                                    break;
                case "arrow":       //
                case "gun":         //
                case "cannon":      if hit_o != noone
                                    {   if mercs[#hit_x,hit_y] == hold_actor
                                        {   with hold_actor.target
                                                ds_list_delete(aim,
                                                ds_list_find_index(aim,other.hold_actor.unit));
                                            hold_actor.target = noone;
                                        }
                                        else if hit_x &gt; 2
                                        {   with hold_actor.target
                                                ds_list_delete(aim,
                                                ds_list_find_index(aim,other.hold_actor.unit));
                                            with hit_o
                                                ds_list_add(aim,other.hold_actor.unit);
                                            hold_actor.target = hit_o;
                                        }
                                    }
                                    break;
                case "mage":        if hit_o == noone
                                    {   if hit_x &lt;= 2
                                        {   mercs[#ds_grid_value_x(mercs,0,0,2,2,hold_actor),
                                                   ds_grid_value_y(mercs,0,0,2,2,hold_actor)] = noone;
                                            mercs[#hit_x,hit_y] = hold_actor;
                                            hold_actor.x = x_grid*(hit_x+0.5);
                                            hold_actor.y = y_grid*(hit_y+0.5);
                                        }
                                    }
                                    break;
                case "c_eat":       //
                case "c_change":    //
                case "c_stacker":   //
                case "c_soul":      //
                case "c_spell":     break;
                case "s_earth1":    //
                case "s_water1":    //
                case "s_air3":      if (hit_o!=noone) and (hit_x&gt;2 or hit_a=="s_air3")
                                    {   mage_me.actp = hit_a;
                                        mage_me.target = hit_o;
                                    }
                                    break;
                case "s_fire1":     //
                case "s_water2":    //
                case "s_earth3":    //
                case "s_air1":      //
                case "s_earth2":    //
                case "s_water3":    if (hit_o!=noone) and (hit_x&lt;=2)
                                    {   if hit_a != "s_water3"
                                        {   mage_me.actp = hit_a;
                                            mage_me.target = hit_o;
                                        }
                                        else
                                            hold_float = hit_o;
                                    }
                                    break;
                case "s_air2":      break;//ADD AFTER A PROJECTILE ENEMY ATTACK IS IN
                default:            if hit_x &lt;= 2
                                    {   /*if hit_o == noone
                                        {   mercs[#hit_x,hit_y] = instance_create(x_grid*(hit_x+0.5),
                                                                                  y_grid*(hit_y+0.5),
                                                                                  hunter);
                                            mercs[#hit_x,hit_y].class = choose("berserker","twin",
                                                                               "hammer","arrow",
                                                                               "gun","cannon",
                                                                               "mage");
                                            mercs[#hit_x,hit_y].unit = unit_n;
                                            unit_n++;
                                        }
                                        else*/if (hit_o!=noone) and hit_o.ready
                                        {   hold_press = hit_o;
                                            hold_timer = 0;
                                        }
                                    }
            }
        }
        else//Cards
        {   var hit_o = instance_position(device_mouse_x(0),device_mouse_y(0),all);
            if auto_draw or (hit_o==the_deck) and ds_list_size(the_hand)&lt;9
            and ((hold_actor==noone and blood&gt;=100)
            or (hold_actor!=noone and hold_actor.class=="mage" and hold_actor.skill and scrap&gt;=1000))
            {   if !auto_draw
                {   if (hold_actor!=noone) and (hold_actor.class=="mage")
                    {   hold_actor.skill--;
                        scrap -= 1000;
                    }
                    else
                        blood -= 100;
                    auto_draw = irandom(26);
                    binder[0] = "";
                    binder[1] = 0;
                }
                var a_card = instance_create(deck.x,deck.y,card);
                var a_print = surface_create(room_width/10,y_grid);
                surface_set_target(a_print);
                draw_clear_alpha(0,0);
                draw_set_halign(fa_center);
                var xc = room_width/10;
                var yc = room_height/4;
                with a_card switch other.auto_draw
                {   case 0:     //
                    case 1:     //
                    case 2:     //
                    case 3:     class = "c_eat";
                                type = choose("arrow","gun","cannon");
                                switch type
                                {   case "arrow":   //
                                    case "gun":     ammo = 80;
                                                    break;
                                    case "cannon":  ammo = 30;
                                                    break;
                                }
                                scrap = 50;
                                
                                pts[0,0] = xc*0.50; pts[0,1] = yc*0.20;
                                pts[1,0] = xc*0.40; pts[1,1] = yc*0.45;
                                pts[2,0] = xc*0.60; pts[2,1] = yc*0.45;
                                pts[3,0] = xc*0.20; pts[3,1] = yc*0.45;
                                pts[4,0] = xc*0.80; pts[4,1] = yc*0.45;
                                pts[5,0] = xc*0.20; pts[5,1] = yc*0.80;
                                pts[6,0] = xc*0.80; pts[6,1] = yc*0.80;
                                pts[7,0] = xc*0.40; pts[7,1] = yc*0.80;
                                pts[8,0] = xc*0.60; pts[8,1] = yc*0.80;
                                pts[9,0] = xc*0.35; pts[9,1] = yc*0.90;
                                pts[10,0] = xc*0.65; pts[10,1] = yc*0.90;
                                for (var i=0;i&lt;=8;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_dkgray,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_dkgray,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_dkgray,1);
                                    draw_primitive_end();
                                }
                                draw_text_transformed_color(xc*0.5,yc*0.5,
                                                            type,
                                                            room_width/view_wport[0],room_height/view_hport[0],
                                                            0,c_white,c_white,c_white,c_white,1);
                                break;
                    case 4:     //
                    case 5:     //
                    case 6:     //
                    case 7:     class = "c_eat";
                                type = "melee";
                                ammo = 100;
                                scrap = 50;
                                cost = -1;
                                
                                pts[0,0] = xc*0.60; pts[0,1] = yc*0.10;
                                pts[1,0] = xc*0.70; pts[1,1] = yc*0.20;
                                pts[2,0] = xc*0.55; pts[2,1] = yc*0.25;
                                pts[3,0] = xc*0.70; pts[3,1] = yc*0.30;
                                pts[4,0] = xc*0.30; pts[4,1] = yc*0.10;
                                pts[5,0] = xc*0.90; pts[5,1] = yc*0.40;
                                pts[6,0] = xc*0.20; pts[6,1] = yc*0.35;
                                pts[7,0] = xc*0.70; pts[7,1] = yc*0.75;
                                pts[8,0] = xc*0.40; pts[8,1] = yc*0.50;
                                pts[9,0] = xc*0.50; pts[9,1] = yc*0.60;
                                pts[10,0] = xc*0.20; pts[10,1] = yc*0.80;
                                pts[11,0] = xc*0.30; pts[11,1] = yc*0.90;
                                for (var i=0;i&lt;=9;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_dkgray,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_dkgray,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_dkgray,1);
                                    draw_primitive_end();
                                }
                                break;
                    case 8:     //
                    case 9:     //
                    case 10:    //
                    case 11:    //
                    case 12:    class = "c_eat";
                                hp = 10 + irandom(5);
                                scrap = hp * 20;
                                
                                pts[0,0] = xc*0.15; pts[0,1] = yc*0.30;
                                pts[1,0] = xc*0.30; pts[1,1] = yc*0.30;
                                pts[2,0] = xc*0.15; pts[2,1] = yc*0.50;
                                pts[3,0] = xc*0.50; pts[3,1] = yc*0.45;
                                pts[4,0] = xc*0.50; pts[4,1] = yc*0.70;
                                pts[5,0] = xc*0.50; pts[5,1] = yc*0.45;
                                pts[6,0] = xc*0.85; pts[6,1] = yc*0.50;
                                pts[7,0] = xc*0.70; pts[7,1] = yc*0.30;
                                pts[8,0] = xc*0.85; pts[8,1] = yc*0.30;
                                for (var i=0;i&lt;=6;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_maroon,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_maroon,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_maroon,1);
                                    draw_primitive_end();
                                }
                                draw_text_transformed_color(xc*0.5,yc*0.5,
                                                            hp,
                                                            room_width/view_wport[0],room_height/view_hport[0],
                                                            0,c_white,c_white,c_white,c_white,1);
                                break;
                    case 13:    //
                    case 14:    //
                    case 15:    //
                    case 16:    class = "c_eat";
                                skill = 2;
                                scrap = 100;
                                
                                pts[0,0] = xc*0.45; pts[0,1] = yc*0.15;
                                pts[1,0] = xc*0.55; pts[1,1] = yc*0.20;
                                pts[2,0] = xc*0.45; pts[2,1] = yc*0.30;
                                pts[3,0] = xc*0.55; pts[3,1] = yc*0.30;
                                pts[4,0] = xc*0.20; pts[4,1] = yc*0.60;
                                pts[5,0] = xc*0.80; pts[5,1] = yc*0.60;
                                pts[6,0] = xc*0.20; pts[6,1] = yc*0.70;
                                pts[7,0] = xc*0.80; pts[7,1] = yc*0.65;
                                for (var i=0;i&lt;=5;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_yellow,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_yellow,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_yellow,1);
                                    draw_primitive_end();
                                }
                                draw_text_transformed_color(xc*0.5,yc*0.5,
                                                            skill,
                                                            room_width/view_wport[0],room_height/view_hport[0],
                                                            0,c_black,c_black,c_black,c_black,1);
                                break;
                    case 17:    //
                    case 18:    class = "c_eat";
                                skill_cap = 1;
                                skill = 1;
                                scrap = 200;
                                
                                pts[0,0] = xc*0.45; pts[0,1] = yc*0.15;
                                pts[1,0] = xc*0.55; pts[1,1] = yc*0.20;
                                pts[2,0] = xc*0.45; pts[2,1] = yc*0.30;
                                pts[3,0] = xc*0.55; pts[3,1] = yc*0.30;
                                pts[4,0] = xc*0.20; pts[4,1] = yc*0.60;
                                pts[5,0] = xc*0.80; pts[5,1] = yc*0.60;
                                pts[6,0] = xc*0.20; pts[6,1] = yc*0.70;
                                pts[7,0] = xc*0.80; pts[7,1] = yc*0.65;
                                for (var i=0;i&lt;=5;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_yellow,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_yellow,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_yellow,1);
                                    draw_primitive_end();
                                }
                                draw_text_transformed_color(xc*0.5,yc*0.5,
                                                            "+",
                                                            room_width/view_wport[0],room_height/view_hport[0],
                                                            0,c_white,c_white,c_white,c_white,1);
                                break;
                    case 19:    //
                    case 20:    class = "c_eat";
                                armor = 1 + (irandom(9)==0);
                                scrap = armor * 200;
                                
                                pts[0,0] = xc*0.20; pts[0,1] = yc*0.10;
                                pts[1,0] = xc*0.15; pts[1,1] = yc*0.15;
                                pts[2,0] = xc*0.20; pts[2,1] = yc*0.15;
                                pts[3,0] = xc*0.15; pts[3,1] = yc*0.85;
                                pts[4,0] = xc*0.45; pts[4,1] = yc*0.15;
                                pts[5,0] = xc*0.45; pts[5,1] = yc*0.85;
                                pts[6,0] = xc*0.50; pts[6,1] = yc*0.10;
                                pts[7,0] = xc*0.50; pts[7,1] = yc*0.90;
                                pts[8,0] = xc*0.55; pts[8,1] = yc*0.15;
                                pts[9,0] = xc*0.55; pts[9,1] = yc*0.85;
                                pts[10,0] = xc*0.80; pts[10,1] = yc*0.15;
                                pts[11,0] = xc*0.85; pts[11,1] = yc*0.85;
                                pts[12,0] = xc*0.85; pts[12,1] = yc*0.15;
                                pts[13,0] = xc*0.80; pts[13,1] = yc*0.15;
                                pts[14,0] = xc*0.80; pts[14,1] = yc*0.10;
                                for (var i=0;i&lt;=12;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_navy,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_navy,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_navy,1);
                                    draw_primitive_end();
                                }
                                draw_text_transformed_color(xc*0.5,yc*0.5,
                                                            armor,
                                                            room_width/view_wport[0],room_height/view_hport[0],
                                                            0,c_white,c_white,c_white,c_white,1);
                                break;
                    case 21:    //
                    case 22:    class = "c_change";
                                type = choose("berserker","twin","hammer","arrow","gun","cannon");
                                scrap = 300;
                                cost = 100;
                                
                                pts[0,0] = xc*0.20; pts[0,1] = yc*0.30;
                                pts[1,0] = xc*0.45; pts[1,1] = yc*0.30;
                                pts[2,0] = xc*0.05; pts[2,1] = yc*0.50;
                                pts[3,0] = xc*0.50; pts[3,1] = yc*0.40;
                                pts[4,0] = xc*0.05; pts[4,1] = yc*0.70;
                                pts[5,0] = xc*0.95; pts[5,1] = yc*0.70;
                                pts[6,0] = xc*0.50; pts[6,1] = yc*0.40;
                                pts[7,0] = xc*0.95; pts[7,1] = yc*0.50;
                                pts[8,0] = xc*0.55; pts[8,1] = yc*0.30;
                                pts[9,0] = xc*0.80; pts[9,1] = yc*0.30;
                                for (var i=0;i&lt;=7;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_olive,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_olive,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_olive,1);
                                    draw_primitive_end();
                                }
                                draw_text_transformed_color(xc*0.5,yc*0.5,
                                                            type,
                                                            room_width/view_wport[0],room_height/view_hport[0],
                                                            0,c_white,c_white,c_white,c_white,1);
                                break;
                    case 23:    class = "c_stacker";
                                sub_class = "c_soul";
                                scrap = 500;
                                cost = 1000;
                                
                                pts[0,0] = xc*0.15; pts[0,1] = yc*0.30;
                                pts[1,0] = xc*0.30; pts[1,1] = yc*0.30;
                                pts[2,0] = xc*0.10; pts[2,1] = yc*0.55;
                                pts[3,0] = xc*0.50; pts[3,1] = yc*0.40;
                                pts[4,0] = xc*0.50; pts[4,1] = yc*0.70;
                                pts[5,0] = xc*0.50; pts[5,1] = yc*0.40;
                                pts[6,0] = xc*0.90; pts[6,1] = yc*0.55;
                                pts[7,0] = xc*0.70; pts[7,1] = yc*0.30;
                                pts[8,0] = xc*0.85; pts[8,1] = yc*0.30;
                                for (var i=0;i&lt;=6;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_white,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_white,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_white,1);
                                    draw_primitive_end();
                                }
                                break;
                    case 24:    class = "c_stacker";
                                sub_class = "c_eat";
                                courage = 1;
                                hp = 25;
                                scrap = 500;
                                
                                pts[0,0] = xc*0.50; pts[0,1] = yc*0.10;
                                pts[1,0] = xc*0.25; pts[1,1] = yc*0.30;
                                pts[2,0] = xc*0.75; pts[2,1] = yc*0.30;
                                pts[3,0] = xc*0.25; pts[3,1] = yc*0.45;
                                pts[4,0] = xc*0.75; pts[4,1] = yc*0.45;
                                pts[5,0] = xc*0.35; pts[5,1] = yc*0.50;
                                pts[6,0] = xc*0.65; pts[6,1] = yc*0.50;
                                pts[7,0] = xc*0.25; pts[7,1] = yc*0.55;
                                pts[8,0] = xc*0.75; pts[8,1] = yc*0.55;
                                pts[9,0] = xc*0.25; pts[9,1] = yc*0.70;
                                pts[10,0] = xc*0.75; pts[10,1] = yc*0.70;
                                pts[11,0] = xc*0.50; pts[11,1] = yc*0.90;
                                for (var i=0;i&lt;=9;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_white,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_white,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_white,1);
                                    draw_primitive_end();
                                }
                                break;
                    case 25:    //
                    case 26:    class = "c_stacker";
                                sub_class = "c_spell";
                                if string_length(other.binder[0]) == 0
                                {   type = choose('e','a','w','f');
                                    ammo = 5 + irandom_range(-2,2);
                                }
                                else if string_length(other.binder[0]) &lt;= 4
                                {   type = other.binder[0];
                                    ammo = other.binder[1];
                                    if string_length(other.binder[0]) == 4
                                    {   class = sub_class;
                                        skill = 4;
                                        caster = floor(power(string_count('e',type)+1,2)/3)
                                               + (floor(power(string_count('a',type)+1,2)/3)&lt;&lt;2)
                                               + (floor(power(string_count('w',type)+1,2)/3)&lt;&lt;4)
                                               + (floor(power(string_count('f',type)+1,2)/3)&lt;&lt;6);
                                    }
                                    other.binder[0] = "";
                                    other.binder[1] = 0;
                                }
                                scrap = 40 * power(5,string_length(type)-1);
                                
                                pts[0,0] = xc*0.10; pts[0,1] = yc*0.10;
                                pts[1,0] = xc*0.50; pts[1,1] = yc*0.30;
                                pts[2,0] = xc*0.30; pts[2,1] = yc*0.50;
                                pts[3,0] = xc*0.90; pts[3,1] = yc*0.10;
                                pts[4,0] = xc*0.10; pts[4,1] = yc*0.90;
                                pts[5,0] = xc*0.70; pts[5,1] = yc*0.50;
                                pts[6,0] = xc*0.50; pts[6,1] = yc*0.70;
                                pts[7,0] = xc*0.90; pts[7,1] = yc*0.90;
                                for (var i=0;i&lt;=5;i++)
                                {   draw_primitive_begin(pr_trianglelist);
                                    draw_vertex_color(pts[i,0],pts[i,1],c_fuchsia,1);
                                    draw_vertex_color(pts[i+1,0],pts[i+1,1],c_fuchsia,1);
                                    draw_vertex_color(pts[i+2,0],pts[i+2,1],c_fuchsia,1);
                                    draw_primitive_end();
                                }
                                for (i=1;i&lt;=string_length(type);i++)
                                {   switch string_char_at(type,i)
                                    {   case 'e':   var xt=0.35; var yt=0.35; var ct=c_olive;
                                                    break;
                                        case 'a':   var xt=0.65; var yt=0.35; var ct=c_green;
                                                    break;
                                        case 'w':   var xt=0.35; var yt=0.65; var ct=c_blue;
                                                    break;
                                        case 'f':   var xt=0.65; var yt=0.65; var ct=c_red;
                                                    break;
                                    }
                                    draw_circle_color(xc*xt,yc*yt,xc*0.10,
                                                      ct,ct*(string_count(string_char_at(type,i),type)==1),false);
                                }
                                draw_text_transformed_color(xc*0.5,yc*0.5,
                                                            ammo,
                                                            room_width/view_wport[0],room_height/view_hport[0],
                                                            0,c_black,c_black,c_black,c_black,1);
                                break;
                    
                }
                draw_set_halign(fa_left);
                surface_reset_target();
                a_card.sprite_index = sprite_create_from_surface(a_print,0,0,
                                                                 surface_get_width(a_print),
                                                                 surface_get_height(a_print),
                                                                 false,false,0,0);
                sprite_collision_mask(a_card.sprite_index,false,1,0,0,0,0,1,0);
                a_card.depth = -1;
                auto_draw = 0;
                surface_free(a_print);
                ds_list_add(the_hand,a_card);
            }
            ////
            else if ds_list_find_index(the_hand,hit_o) &gt;= 0
            {   if hold_actor == noone
                {   hold_press = hit_o;
                    hold_timer = 0;
                }
                else if hold_actor == hit_o
                {   scrap += hold_actor.scrap;
                    ds_list_delete(the_hand,hold_actor.stack);
                    sprite_delete(hold_actor.sprite_index);
                    with hold_actor instance_destroy();
                }
                else if (hold_actor.class=="c_stacker") and (scrap&gt;=hold_actor.cost)
                {   if (hold_actor.sub_class=="c_soul" and hit_o.class=="c_change")
                    or (hold_actor.sub_class=="c_eat" and hit_o.class=="c_stacker" and hit_o.sub_class=="c_eat")
                    {   scrap -= hold_actor.cost;
                        hit_o.class = hold_actor.sub_class;
                        hit_o.scrap *= 5;
                        hit_o.image_blend = c_aqua;
                        ds_list_delete(the_hand,hold_actor.stack);
                        sprite_delete(hold_actor.sprite_index);
                        with hold_actor instance_destroy();
                    }
                    else if (hold_actor.sub_class=="c_spell")
                    and (hit_o.class=="c_stacker") and (hit_o.sub_class=="c_spell")
                    {   binder[0] = string_insert(hit_o.type,hold_actor.type,string_length(hold_actor.type));
                        if (string_length(binder[0])&lt;=4) and (string_count('e',binder[0])&lt;=2)
                        and (string_count('a',binder[0])&lt;=2) and (string_count('w',binder[0])&lt;=2)
                        and (string_count('f',binder[0])&lt;=2)
                        {   auto_draw = 25;
                            binder[1] = hold_actor.ammo + hit_o.ammo;
                            ds_list_delete(the_hand,hold_actor.stack);
                            sprite_delete(hold_actor.sprite_index);
                            with hold_actor instance_destroy();
                            ds_list_delete(the_hand,ds_list_find_index(the_hand,hit_o));
                            sprite_delete(hit_o.sprite_index);
                            with hit_o instance_destroy();
                        }
                    }
                }
                /*switch hold_actor.sub_class
                {   case "c_soul":      if hit_o.class == "c_change"
                                        {   scrap -= hold_actor.cost;
                                            hit_o.class = hold_actor.sub_class;
                                            hit_o.scrap *= 5;
                                            hit_o.image_blend = c_aqua;
                                            ds_list_delete(the_hand,hold_actor.stack);
                                            sprite_delete(hold_actor.sprite_index);
                                            with hold_actor instance_destroy();
                                        }
                                        break;
                    case "c_eat":       if (hit_o.class=="c_stacker") and (hit_o.sub_class=="c_eat")
                                        {   scrap -= hold_actor.cost;
                                            ds_list_delete(the_hand,hold_actor.stack);
                                            sprite_delete(hold_actor.sprite_index);
                                            with hold_actor instance_destroy();
                                            hit_o.class = hold_actor.sub_class;
                                            hit_o.scrap *= 5;
                                            hit_o.image_blend = c_aqua;
                                        }
                                        break;
                }*/
            }
            ////
            else if (hit_o!=noone) and instance_exists(hold_actor) and (hold_actor.class=="mage")
            {   hold_press = hit_o;
                hold_timer = 0;
            }
        }
        if instance_exists(hold_actor) and (hold_actor.class=="mage" or hold_actor.object_index==spell_cast)
            with spell_cast if id != other.hold_press
                instance_destroy();
        hold_actor = noone;
    }
    
    //Holding press
    if hold_press != noone
    {   if device_mouse_check_button_released(0,mb_left)//Short press
        {   switch hold_press.class
            {   case "berserker":   //
                case "twin":        //
                case "hammer":      //
                case "mage":        if mercs[#floor(device_mouse_x(0)/x_grid),
                                              floor(device_mouse_y(0)/y_grid)] == hold_press
                                    {   hold_actor = hold_press;
                                        if (hold_actor.class=="mage") and hold_actor.skill and hold_actor.ammo
                                        {   var j = 0;
                                            var k1, k2 = 0;
                                            for (var i=0;i&lt;=3;i++) if (hold_actor.caster&gt;&gt;i*2)&amp;3
                                            {   if (hold_actor.caster&gt;&gt;i*2)&amp;3 == 1
                                                {   k1 = instance_create(y_grid*j,y_grid*3,spell_cast);
                                                    j++;
                                                }
                                                else if (hold_actor.caster&gt;&gt;i*2)&amp;3 == 3
                                                {   k1 = instance_create(y_grid*j,y_grid*3,spell_cast);
                                                    k2 = instance_create(y_grid*(j+1),y_grid*3,spell_cast);
                                                    j += 2;
                                                }
                                                switch i
                                                {   case 0: with k1
                                                            {   image_blend = c_olive;
                                                                if !k2
                                                                    class = "s_earth1";
                                                                else
                                                                    class = "s_earth2";
                                                            }
                                                            if k2 with k2
                                                            {   image_blend = c_olive;
                                                                class = "s_earth3";
                                                            }
                                                            break;
                                                    case 1: with k1
                                                            {   image_blend = c_green;
                                                                if !k2
                                                                    class = "s_air1";
                                                                else
                                                                    class = "s_air2";
                                                            }
                                                            if k2 with k2
                                                            {   image_blend = c_green;
                                                                class = "s_air3";
                                                            }
                                                            break;
                                                    case 2: with k1
                                                            {   image_blend = c_blue;
                                                                if !k2
                                                                    class = "s_water1";
                                                                else
                                                                    class = "s_water2";
                                                            }
                                                            if k2 with k2
                                                            {   image_blend = c_blue;
                                                                class = "s_water3";
                                                            }
                                                            break;
                                                    case 3: with k1
                                                            {   image_blend = c_red;
                                                                if !k2
                                                                    class = "s_fire1";
                                                                else
                                                                    class = "s_fire2";
                                                            }
                                                            if k2 with k2
                                                            {   image_blend = c_red;
                                                                class = "s_fire3";
                                                            }
                                                            break;
                                                }
                                                k2 = 0;
                                            }
                                        }
                                    }
                                    break;
                case "arrow":       //
                case "gun":         //
                case "cannon":      var hit_x = floor(device_mouse_x(0)/x_grid);
                                    var hit_y = floor(device_mouse_y(0)/y_grid);
                                    var hit_x0 = ds_grid_value_x(mercs,0,0,2,2,hold_press);
                                    var hit_y0 = ds_grid_value_y(mercs,0,0,2,2,hold_press);
                                    if (hit_x!=hit_x0 xor hit_y!=hit_y0)
                                    {   if (hit_y&lt;=2 and hit_x&lt;=2) and (mercs[#hit_x,hit_y]==noone)
                                        {   mercs[#hit_x0,hit_y0] = noone;
                                            mercs[#hit_x,hit_y] = hold_press;
                                            hold_press.ready = 0;
                                            hold_press.xn = x_grid*(hit_x+0.5);
                                            hold_press.yn = y_grid*(hit_y+0.5);
                                        }
                                    }
                                    else if (hit_x==hit_x0) and (hit_y==hit_y0)
                                        hold_actor = hold_press;
                                    break;
                case "c_eat":       //
                case "c_change":    //
                case "c_stacker":   //
                case "c_soul":      //
                case "c_spell":     //
                case "s_earth1":    //
                case "s_earth2":    //
                case "s_earth3":    //
                case "s_air1":      //
                case "s_air2":      //
                case "s_air3":      //
                case "s_water1":    //
                case "s_water2":    //
                case "s_water3":    //
                case "s_fire1":     if instance_position(device_mouse_x(0),device_mouse_y(0),all) == hold_press
                                        hold_actor = hold_press;
                                    else if hold_press.object_index == spell_cast
                                        hold_press = deck;
                                    break;
                case "s_fire2":     //
                case "s_fire3":     hold_press = deck;
                                    break;
            }
            //if (hold_press.class=="mage" and hold_press.object_index==spell_cast)
            //if !(hold_press.class!="mage" xor hold_press.object_index!=spell_cast)
            if !(hold_press.class=="mage" or hold_press.object_index==spell_cast)
                with spell_cast instance_destroy();
            hold_press = noone;
            hold_timer = 0;
        }
        else
            hold_timer++;
        
        if hold_timer &gt;= room_speed*0.4//Long press
        {   switch hold_press.class
            {   case "berserker":   //
                case "twin":        //
                case "hammer":      hold_press.actp = hold_press.class;
                                    break;
                case "c_eat":       //
                case "c_change":    //
                case "c_stacker":   //
                case "c_soul":      //
                case "c_spell":     hold_float = hold_press;
                                    break;
                case "s_fire2":     //
                case "s_fire3":     mage_me.actp = hold_press.class;
                                    break;
            }
            if hold_press.object_index == spell_cast
                with hold_press instance_destroy();
            hold_press = noone;
            hold_timer = 0;
        }
    }
    
    //Dragging press
    for (var i=0;i&lt;ds_list_size(the_hand);i++)
    {   the_hand[|i].stack = i;
        with the_hand[|i]
        {   if (other.hold_actor!=noone and (other.hold_actor.class=="mage" or other.hold_actor.object_index==spell_cast))
            or (other.hold_press!=noone and other.hold_press.object_index==spell_cast)
            {   x = -room_width;
                y = -room_height;
            }
            else if other.hold_float != id
            {   x = stack * room_width/10;
                y = other.y_grid * 3;
            }
            else
            {   x = device_mouse_x(0) - room_width/20;
                y = device_mouse_y(0) - other.y_grid/4;
            }
        }
    }
    if (hold_float!=noone) and device_mouse_check_button_released(0,mb_left)
    {   var hit_x = floor(device_mouse_x(0)/x_grid);
        var hit_y = floor(device_mouse_y(0)/y_grid);
        if (hit_y&lt;=2) and (hit_x&lt;=2)
        {   var hit_o = mercs[#hit_x,hit_y];
            switch hold_float.class
            {   case "berserker":   //
                case "twin":        //
                case "hammer":      //
                case "arrow":       //
                case "gun":         //
                case "cannon":      //
                case "mage":        if (hit_o!=noone) and hit_o.ready and (hit_o!=hold_float)
                                    {   var j = 0;
                                        for (var i=0;i&lt;ds_list_size(hold_float.shield[3]);i++)
                                        {   var k = ds_list_find_value(hold_float.shield[3],i);
                                            if k[0] == hit_o
                                            {   var j = 1;
                                                break;
                                            }
                                        }
                                        if !j
                                        {   mage_me.actp = "s_water3";
                                            mage_me.target = hold_float + (hit_o&lt;&lt;20);
                                        }
                                    }
                                    break;
                case "c_eat":       if (hit_o!=noone) and hit_o.ready
                                    and (hold_float.type=="all" or hold_float.type==hit_o.class
                                    or (hold_float.type=="melee"
                                    and (hit_o.class=="berserker" or hit_o.class=="twin" or hit_o.class=="hammer")))
                                    {   if hold_float.cost &lt; 0//ADJUST LATER TO ACCEPT OTHER STATS
                                        {   hold_float.ammo = min(floor(-scrap/hold_float.cost),hold_float.ammo);
                                            if hold_float.type == "melee"
                                                hold_float.ammo = min(hold_float.ammo,300-hit_o.ammo);
                                            hit_o.ammo += hold_float.ammo;
                                            scrap += hold_float.cost * hold_float.ammo;
                                        }
                                        else
                                        {   hit_o.ammo += hold_float.ammo;
                                            scrap -= hold_float.cost;
                                        }
                                        hit_o.skill += hold_float.skill;
                                        hit_o.skill_cap += hold_float.skill_cap;
                                        hit_o.armor += hold_float.armor;
                                        hit_o.hp += hold_float.hp;
                                        hit_o.courage += hold_float.courage;
                                        ds_list_delete(the_hand,hold_float.stack);
                                        sprite_delete(hold_float.sprite_index);
                                        with hold_float instance_destroy();
                                    }
                                    break;
                case "c_change":    if (hit_o!=noone) and hit_o.ready and (hit_o.class!="mage")
                                    and (scrap&gt;=hit_o.courage*hold_float.cost)
                                    {   scrap -= hit_o.courage*hold_float.cost;
                                        with hit_o
                                        {   courage = ceil(courage*0.7);
                                            if burst and (class=="berserker")
                                            {   buff_a -= 0.1;
                                                buff_s -= 0.1;
                                                buff_d -= 0.1;
                                                for (var i=0;i&lt;=2;i++)
                                                    for (var j=0;j&lt;=2;j++)
                                                        if (other.mercs[#i,j]!=noone) and (other.mercs[#i,j]!=id)
                                                        {   other.mercs[#i,j].buff_a -= buff_sp[0];
                                                            other.mercs[#i,j].buff_s -= buff_sp[1];
                                                            other.mercs[#i,j].buff_d -= buff_sp[2];
                                                        }
                                                buff_sp[0] = 0;
                                                buff_sp[1] = 0;
                                                buff_sp[2] = 0;
                                            }
                                            burst = 0;
                                            /*if class == "arrow"
                                                rage = hp;
                                            else
                                                rage = 0;*/
                                        }
                                        hit_o.class = hold_float.type;
                                        ds_list_delete(the_hand,hold_float.stack);
                                        sprite_delete(hold_float.sprite_index);
                                        with hold_float instance_destroy();
                                    }
                                    break;
                case "c_stacker":   break;
                case "c_soul":      if hit_o == noone
                                    {   mercs[#hit_x,hit_y] = instance_create(x_grid*(hit_x+0.5),
                                                                              y_grid*(hit_y+0.5),
                                                                              hunter);
                                        mercs[#hit_x,hit_y].class = hold_float.type;
                                        mercs[#hit_x,hit_y].unit = unit_n;
                                        unit_n++;
                                        ds_list_delete(the_hand,hold_float.stack);
                                        sprite_delete(hold_float.sprite_index);
                                        with hold_float instance_destroy();
                                    }
                                    break;
                case "c_spell":     if (hit_o!=noone) and hit_o.ready and (hit_o.class=="mage")
                                    {   hit_o.caster = hold_float.caster;
                                        hit_o.ammo += hold_float.ammo;
                                        hit_o.skill += hold_float.skill;
                                        ds_list_delete(the_hand,hold_float.stack);
                                        sprite_delete(hold_float.sprite_index);
                                        with hold_float instance_destroy();
                                    }
                                    break;
            }
        }
        hold_float = noone;
    }
}
else
    game_end();

if ds_grid_get_mean(mercs,3,0,4,2) == noone
{   mercs[#4,0] = instance_create(x_grid*4.5,y_grid*0.5,skeleton);
    mercs[#3,1] = instance_create(x_grid*3.5,y_grid*1.5,skeleton);
    mercs[#4,2] = instance_create(x_grid*4.5,y_grid*2.5,skeleton);
    mercs[#4,0].hp += progress*50;
    mercs[#3,1].hp += progress*50;
    mercs[#4,2].hp += progress*50;
    var get_random = ds_list_create();
    for (var i=0;i&lt;=2;i++)
        for (var j=0;j&lt;=2;j++)
            if mercs[#i,j] != noone
            {   mercs[#i,j].skill++;
                mercs[#i,j].hp += mercs[#i,j].courage;
                ds_list_add(get_random,mercs[#i,j]);
            }
    with get_random[|irandom(ds_list_size(get_random)-1)]
    {   hp += 25;
        courage++;
    }
    ds_list_destroy(get_random);
    progress++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PLAYFIELD

/*for (var i=0;i&lt;3;i++)
    for (var j=0;j&lt;5;j++)
        draw_rectangle_color(x_grid*j,y_grid*i,
                             x_grid*(j+1),y_grid*(i+1),
                             c_red,c_red,c_red,c_red,true);*/
draw_rectangle_color(0,0,x_grid*3,y_grid*3,
                     c_red,c_red,c_red,c_red,true);
draw_rectangle_color(x_grid*3,0,x_grid*5,y_grid*3,
                     c_red,c_red,c_red,c_red,true);
draw_rectangle_color(0,y_grid*3,x_grid*5,y_grid*4,
                     c_black,c_black,c_black,c_black,false);
draw_rectangle_color(0,y_grid*3,x_grid*5,y_grid*4,
                     c_white,c_white,c_white,c_white,true);

draw_set_halign(fa_center);
draw_text_transformed_color(room_width*0.95,y_grid*3,
                            "FIGHT: "+string(progress),
                            room_width/view_wport[0],room_height/view_hport[0],
                            0,c_white,c_white,c_white,c_white,1);
draw_text_transformed_color(room_width*0.95,y_grid*3.16,
                            blood,
                            room_width/view_wport[0],room_height/view_hport[0],
                            0,c_red,c_red,c_red,c_red,1);
draw_text_transformed_color(room_width*0.95,y_grid*3.32,
                            scrap,
                            room_width/view_wport[0],room_height/view_hport[0],
                            0,c_silver,c_silver,c_silver,c_silver,1);
draw_set_halign(fa_left);

if (hold_actor!=noone) with hold_actor
{   var hx = x + sprite_width/2;
    var hy = y + sprite_height/2;
    draw_rectangle_color(hx-room_width/20,hy-other.y_grid/2,
                         hx+room_width/20,hy+10-other.y_grid/2,
                         c_green,c_green,c_green,c_green,false);
    if class == "mage"
        draw_rectangle_color(0,other.y_grid*3,room_width*0.9,other.y_grid*4,
                             c_white,c_white,c_white,c_white,false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
